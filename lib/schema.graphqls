# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Coach {
  _id: ObjectId!
  certifications: String
  description: String
  name: String!
  picture: String!
  reviews: String
  skills: [CoachSkill!]
  students: [ObjectId!]
  title: String
  userId: ObjectId!
  username: String!
}

input CoachInput {
  description: String
  profilePicture: String
  skills: [SkillInput!]
  title: String
}

type CoachResponse {
  _id: ObjectId!
  certifications: String
  description: String
  name: String
  picture: String
  reviews: String
  skills: [CoachSkill!]
  students: [CoachStudent!]
  title: String
  userId: ObjectId!
  username: String!
}

type CoachSkill {
  skill: String!
}

type CoachStudent {
  name: String!
  picture: String!
  userId: String!
  username: String!
}

type CoachingRequest {
  _id: ObjectId!
  name: String!
  picture: String!
  username: String!
}

type Mutation {
  respondToRequest(input: RespondToRequestInput!): Request!
  sendRequest(input: RequestInput!): Request!
  updateCoach(input: CoachInput!): Coach!
  updateCurrentUser(input: UserInput!): User!
  updateStudent(input: StudentInput!): Student!
}

"""Mongo object id scalar type"""
scalar ObjectId

type Query {
  canRequestCoaching(coachUsername: String): Boolean!
  coach(username: String!): CoachResponse
  coaches(skill: String): [Coach!]!
  coachingRequests: [CoachingRequest!]!
  currentCoach: CoachResponse
  currentStudent: StudentResponse
  currentUser: User
  skills(skill: String): [Skill!]!
  user(userId: ObjectId!): User
}

type Request {
  _id: ObjectId!
  coachId: ObjectId!
  status: String!
  studentId: ObjectId!
  type: RequestType!
}

input RequestInput {
  _id: ObjectId
  coachId: ObjectId
  status: RequestStatus
  studentId: ObjectId
  type: RequestType
}

enum RequestStatus {
  accept
  awaitingResponse
  decline
}

enum RequestType {
  coaching
}

input RespondToRequestInput {
  _id: ObjectId!
  status: RequestStatus!
}

type Skill {
  _id: ObjectId!
  skill: String!
}

input SkillInput {
  skill: String!
}

type Student {
  _id: ObjectId!
  coaches: [ObjectId!]
  description: String
  name: String!
  picture: String!
  skills: [StudentSkill!]
  title: String
  userId: ObjectId!
  username: String!
}

type StudentCoach {
  name: String!
  picture: String!
  userId: String!
  username: String!
}

input StudentInput {
  description: String
  skills: [SkillInput!]
  title: String
}

type StudentResponse {
  _id: ObjectId!
  certifications: String
  coaches: [StudentCoach!]
  description: String
  name: String
  picture: String
  reviews: String
  skills: [StudentSkill!]
  title: String
  userId: String!
  username: String!
}

type StudentSkill {
  skill: String!
}

type User {
  _id: ObjectId!
  coachId: ObjectId
  email: String!
  emailVerified: Boolean
  familyName: String
  givenName: String
  locale: String
  mode: String
  name: String
  picture: String
  studentId: ObjectId
  username: String!
}

input UserInput {
  mode: UserMode
  name: String
  username: String
}

enum UserMode {
  coach
  student
}
